---
- name: Install yarn repo.
  become: yes
  shell: |
    yum-config-manager --add-repo=https://dl.yarnpkg.com/rpm/yarn.repo
  # yum_repository:
  #   name: Yarn Repository
  #   description: Yarn Repository
  #   baseurl: https://dl.yarnpkg.com/rpm/
  #   enabled: 1
  #   gpgcheck: 1
  #   gpgkey: https://dl.yarnpkg.com/rpm/pubkey.gpg

- name: Install ripgrep repo.
  become: yes
  shell: |
    yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo

- name: Install IUS (Inline with Upstream Stable).
  yum:
    name: https://centos7.iuscommunity.org/ius-release.rpm
    state: present

- name: Install python 3.
  yum:
    name: "{{ item }}"
  with_items:
    - python36u
    - python36u-pip

- name: Install the nice things.
  yum:
    name: "{{ item }}"
    state: latest
    update_cache: yes
  with_items:
    - go
    - mosh
    - neovim
    - nodejs
    - ripgrep
    - rsync
    - yarn

- name: Own `node_modules`
  become: yes
  shell: "chown -R {{ user }} /usr/lib/node_modules"

- name: Start docker daemon at boot.
  systemd:
    name: docker
    enabled: yes
  when: ansible_distribution == 'CentOS'

- name: Update PATH to include `/usr/local/bin`.
  become: yes
  become_user: "{{ user }}"
  lineinfile:
    dest: /etc/environment
    state: present
    backrefs: yes
    regexp: PATH="$PATH:/usr/local/bin"
    line: PATH="$PATH:/usr/local/bin"

- name: Determine if RCM is installed.
  shell: if (hash lsrc &>/dev/null); then echo 1; else echo 0; fi
  register: rcm_installed
  ignore_errors: yes
  tags: rcm

- name: Pull down RCM tarball.
  become: yes
  get_url:
    url: https://thoughtbot.github.io/rcm/dist/rcm-1.3.1.tar.gz
    dest: /tmp

- name: Unarchive RCM tarball.
  unarchive:
    src: /tmp/rcm-1.3.1.tar.gz
    dest: /tmp
    remote_src: yes

- name: Build that shit.
  become: yes
  shell: |
    cd /tmp/rcm-1.3.1 && \
    ./configure && \
    make && \
    make install

# - name: Determine if dotfiles directory exists.
#   become_user: "{{ user }}"
#   shell: ls "$HOME/dotfiles" &>/dev/null
#   register: dotfiles_cloned
#   ignore_errors: yes

- name: Pull dotfiles.
  become: yes
  become_user: "{{ user }}"
  tags: rcm
  git:
    repo: https://github.com/jessestuart/dotfiles
    dest: "$HOME/dotfiles"
  # when: not dotfiles_cloned

- name: UNLEASH THE DOTFILES!
  become: yes
  become_user: "{{ user }}"
  shell: |
    cd "$HOME/dotfiles" && \
    rcup -d . && \
    source "$HOME/.zshrc"

# ============
# Neovim setup
# ============
- name: Install python neovim bindings.
  pip:
    name: neovim

- name: Create vim plug directory.
  become: yes
  become_user: "{{ user }}"
  tags:
    - vim
  file:
    path: "$HOME/.local/share/nvim/site/autoload"
    state: directory
    owner: "{{ user }}"

- name: Install vim plug.
  become: yes
  become_user: "{{ user }}"
  tags:
    - vim
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "$HOME/.local/share/nvim/site/autoload/"
    owner: "{{ user }}"
    force: yes

- name: Install vim plugins.
  become: yes
  become_user: "{{ user }}"
  ignore_errors: true
  raw: nvim -e +PlugInstall +qall
